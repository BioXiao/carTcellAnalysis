xcripts_gtf <- import.gff2(gff_file)
xcript_dat <- as.data.frame(xcripts_gtf)
# function to append CAR segment
get_segment <- Vectorize(function(pos) {
xcript_dat %>%
filter(seqnames == "CAR-1",
(start - 1) <= pos & (end + 1) >= pos) %>%
select(transcript_id) %>%
as.character()
})
lib_cov <- car_cov_dat %>%
filter(lib_id == car_cov_dat$lib_id[1]) %>%
mutate(segment = get_segment(pos)) %>%
select(pos, segment)
car_cov_dat <- car_cov_dat %>%
left_join(lib_cov, by = c("pos" = "pos")) %>%
filter(segment != "character(0)")
# clean up duplicated headers
clean_dup_names <- function(df) {
df_names <- names(df)
is_dup_name <- duplicated(df_names)
df_names[is_dup_name] <- str_c(df_names[is_dup_name], "2")
names(df) <- df_names
return(df)
}
# simplify library ID
simplify_lib_id <- function(df) {
df_names <- names(df)
is_lib_name <- str_detect(tolower(df_names), "lib.*id")
df_names[is_lib_name] <- "lib_id"
names(df) <- df_names
df %>%
mutate(lib_id = str_extract(lib_id, "lib[0-9]+"))
}
# clean/relabel donor ID
clean_donor_ids <- function(df) {
df %>%
mutate(donor_id = tolower(donor_id))
}
# relabel timepoints
relabel_timepoints <- function(df) {
df %>%
mutate(timepoint = str_replace(timepoint, " ", ""),
timepoint = str_replace(timepoint, "InfusionProduct", "IP"),
timepoint = str_replace(timepoint, "Day0", "t0"),
timepoint = str_replace(timepoint, "Day(7|8|9|12)", "t1"),
timepoint = str_replace(timepoint, "Day(26|28|29|33)", "t2"))
}
# convert transcript names to segment names
relabel_transcripts <- function(df, xcript_dat) {
df_names <- names(df)
for (i in 1:length(df_names)) {
if (df_names[i] %in% xcript_dat$seqnames) {
xcript_row <- which(xcript_dat$seqnames %in% df_names[i])
new_name <- xcript_dat$transcript_id[xcript_row]
df_names[i] <- new_name
}
}
names(df) <- df_names
return(df)
}
prep_cov_dat <- function(lib_dat, metric_dat) {
lib_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
clean_donor_ids() %>%
select(lib_id, donor_id, timepoint) %>%
relabel_timepoints() %>%
left_join(cov_dat, by = c("lib_id" = "lib_id")) %>%
left_join(metric_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
select(lib_id, fastq_total_reads,
median_cv_coverage, mapped_reads_w_dups),
by = c("lib_id" = "lib_id")) %>%
left_join(map_rate_dat, by = c("lib_id" = "lib_id")) %>%
mutate(mapped_reads = fastq_total_reads * map_rate,
norm_cov = cov / mapped_reads) %>%
left_join(salmon_quant_dat %>%
# filter(Name == "CAR-1") %>%
select(lib_id, Name, TPM) %>%
spread(Name, TPM) %>%
dplyr::rename(CAR = `CAR-1`) %>%
relabel_transcripts(xcript_dat)) %>%
left_join(jxn_summary_dat) %>%
mutate_each_(funs(. = ifelse(is.na(.), 0, .)),
vars = c("tra_pos", "trb_pos", "tcr_pos"))
}
View(car_cov_dat)
car_cov_dat %>% filter(lib_id == "lib6960") %>% nrow()
library(knitr)
library(stringr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(viridis)
library(rtracklayer)
library(ggthemes)
library(scales)
library(cowplot)
myCbPal <- colorblind_pal()(8)
myCbPal[c(1, 3, 6)] <- myCbPal[c(6, 1, 3)]
myCbPal[3] <- "#666666"
car_cov_dat %>% filter(lib_id == "lib6960") %>% nrow()
car_cov_dat %>% filter(lib_id == "lib6961") %>% nrow()
n_distinct(car_cov_dat$lib_id)
# clean up duplicated headers
clean_dup_names <- function(df) {
df_names <- names(df)
is_dup_name <- duplicated(df_names)
df_names[is_dup_name] <- str_c(df_names[is_dup_name], "2")
names(df) <- df_names
return(df)
}
# simplify library ID
simplify_lib_id <- function(df) {
df_names <- names(df)
is_lib_name <- str_detect(tolower(df_names), "lib.*id")
df_names[is_lib_name] <- "lib_id"
names(df) <- df_names
df %>%
mutate(lib_id = str_extract(lib_id, "lib[0-9]+"))
}
# clean/relabel donor ID
clean_donor_ids <- function(df) {
df %>%
mutate(donor_id = tolower(donor_id))
}
# relabel timepoints
relabel_timepoints <- function(df) {
df %>%
mutate(timepoint = str_replace(timepoint, " ", ""),
timepoint = str_replace(timepoint, "InfusionProduct", "IP"),
timepoint = str_replace(timepoint, "Day0", "t0"),
timepoint = str_replace(timepoint, "Day(7|8|9|12)", "t1"),
timepoint = str_replace(timepoint, "Day(26|28|29|33)", "t2"))
}
# convert transcript names to segment names
relabel_transcripts <- function(df, xcript_dat) {
df_names <- names(df)
for (i in 1:length(df_names)) {
if (df_names[i] %in% xcript_dat$seqnames) {
xcript_row <- which(xcript_dat$seqnames %in% df_names[i])
new_name <- xcript_dat$transcript_id[xcript_row]
df_names[i] <- new_name
}
}
names(df) <- df_names
return(df)
}
prep_cov_dat <- function(lib_dat, metric_dat) {
lib_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
clean_donor_ids() %>%
select(lib_id, donor_id, timepoint) %>%
relabel_timepoints() %>%
left_join(cov_dat, by = c("lib_id" = "lib_id")) %>%
left_join(metric_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
select(lib_id, fastq_total_reads,
median_cv_coverage, mapped_reads_w_dups),
by = c("lib_id" = "lib_id")) %>%
left_join(map_rate_dat, by = c("lib_id" = "lib_id")) %>%
mutate(mapped_reads = fastq_total_reads * map_rate,
norm_cov = cov / mapped_reads) %>%
left_join(salmon_quant_dat %>%
# filter(Name == "CAR-1") %>%
select(lib_id, Name, TPM) %>%
spread(Name, TPM) %>%
dplyr::rename(CAR = `CAR-1`) %>%
relabel_transcripts(xcript_dat)) %>%
left_join(jxn_summary_dat) %>%
mutate_each_(funs(. = ifelse(is.na(.), 0, .)),
vars = c("tra_pos", "trb_pos", "tcr_pos"))
}
plot_coverage <- function(formatted_cov_dat, gtf_dat,
split = TRUE, fits_only = FALSE,
color_by = "lib_num", fade_by = "log2(CAR + 1)",
hide_legend = FALSE) {
# add lib numbers for coloring
formatted_cov_dat <- formatted_cov_dat %>%
group_by(donor_id, timepoint) %>%
mutate(lib_num = dense_rank(lib_id) / n_distinct(lib_id),
lib_num = as.character(lib_num)) %>%
ungroup()
# determine plot height
height <- log2(max(formatted_cov_dat$cov, na.rm = TRUE) + 1)
# create color scale
if (!fits_only) {
gradient_stop <- myCbPal[3]
} else {
gradient_stop <- myCbPal[2]
}
num_libs <- n_distinct(formatted_cov_dat$lib_id)
cc <- seq_gradient_pal(myCbPal[3], gradient_stop)(seq(0, 1, length.out = num_libs))
# build plot
p_cov <- ggplot() +
geom_rect(data = gtf_dat,
aes(xmin = start, xmax = end, ymin = 0, ymax = height,
fill = segment),
alpha = 0.5, colour = "gray")
if (!fits_only) {
p_cov <- p_cov +
geom_point(data = formatted_cov_dat,
aes_string(x = "pos", y = "log2(cov + 1)",
alpha = fade_by, colour = color_by),
stroke = 0) +
geom_smooth(data = formatted_cov_dat,
aes(x = pos, y = log2(cov + 1)),
se = FALSE, colour = myCbPal[2])
} else {
p_cov <- p_cov +
geom_line(data = formatted_cov_dat,
aes_string(x = "pos", y = "log2(cov + 1)",
group = "lib_id", colour = color_by,
alpha = fade_by),
stat = "smooth", method = "loess",
se = FALSE, size = 1)
}
if (color_by == "lib_num") {
p_cov <- p_cov +
scale_color_manual(values = cc) +
guides(colour = FALSE)
} else {
p_cov <- p_cov +
scale_color_gradient(low = myCbPal[3], high = myCbPal[2])
}
if (is.numeric(fade_by)) {
p_cov <- p_cov +
scale_alpha_continuous(range = c(fade_by, fade_by)) +
guides(alpha = FALSE)
} else {
p_cov <- p_cov +
scale_alpha_continuous(range = c(0.2, 0.8))
}
if (color_by == fade_by) {
p_cov <- p_cov +
guides(alpha = FALSE)
}
p_cov <- p_cov +
scale_fill_viridis(discrete = TRUE) +
theme_gray()
if (split) {
p_cov <- p_cov +
facet_grid(donor_id ~ timepoint)
}
if (hide_legend) {
p_cov <- p_cov +
guides(fill = FALSE, colour = FALSE, alpha = FALSE)
}
return(p_cov)
}
bulk_cov_dat <- bulk_lib_dat %>%
prep_cov_dat(bulk_metric_dat) %>%
filter(donor_id %in% c("x145", "x194", "x228"))
prep_cov_dat <- function(lib_dat, cov_dat, metric_dat) {
lib_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
clean_donor_ids() %>%
select(lib_id, donor_id, timepoint) %>%
relabel_timepoints() %>%
left_join(cov_dat, by = c("lib_id" = "lib_id")) %>%
left_join(metric_dat %>%
clean_dup_names() %>%
simplify_lib_id() %>%
select(lib_id, fastq_total_reads,
median_cv_coverage, mapped_reads_w_dups),
by = c("lib_id" = "lib_id")) %>%
left_join(map_rate_dat, by = c("lib_id" = "lib_id")) %>%
mutate(mapped_reads = fastq_total_reads * map_rate,
norm_cov = cov / mapped_reads) %>%
left_join(salmon_quant_dat %>%
# filter(Name == "CAR-1") %>%
select(lib_id, Name, TPM) %>%
spread(Name, TPM) %>%
dplyr::rename(CAR = `CAR-1`) %>%
relabel_transcripts(xcript_dat)) %>%
left_join(jxn_summary_dat) %>%
mutate_each_(funs(. = ifelse(is.na(.), 0, .)),
vars = c("tra_pos", "trb_pos", "tcr_pos"))
}
bulk_cov_dat <- bulk_lib_dat %>%
prep_cov_dat(car_cov_dat, bulk_metric_dat) %>%
filter(donor_id %in% c("x145", "x194", "x228"))
plot_coverage(bulk_cov_dat, car_dat)
p89_c1_cov_dat <- sc_lib_dat %>%
prep_cov_dat(car_cov_dat, sc_metric_dat)
plot_coverage(p89_c1_cov_dat, car_dat)
p85_c1_cov_dat <- p85_lib_dat %>%
prep_cov_dat(car_cov_dat, p85_metric_dat)
plot_coverage(p85_c1_cov_dat, car_dat)
p89_c1_cov_dat %>%
plot_coverage(car_dat, fits_only = TRUE)
xcript_id_table <- xcript_dat %>%
filter(seqnames != "CAR-1") %>%
select(xcript_name = gene_id, segment_version = transcript_id)
gene_list <-c("CAR",
xcript_dat$transcript_id %>% intersect(names(p89_c1_cov_dat))) %>%
as.list()
p_list <- lapply(gene_list, function(x) {
p <- p89_c1_cov_dat %>%
plot_coverage(car_dat, fits_only = TRUE, split = FALSE,
hide_legend = TRUE,
color_by = sprintf("log2(%s + 1)", x),
fade_by = sprintf("log2(%s + 1)", x))
return(p)
})
plot_grid(plotlist = p_list, ncol = 3, nrow = 5,
labels = unlist(gene_list), hjust = 0)
cov_indicator_dat <- p89_c1_cov_dat %>%
group_by(lib_id, segment) %>%
filter(segment %in% c("CD19scFv", "T2A", "EGFRt")) %>%
summarise(hits = sum(cov > 0)) %>%
ungroup() %>%
group_by(lib_id) %>%
summarise(car_expr_cov = ifelse(any(hits >= 10),
"car_expr_cov", "no_car_cov"))
car_expr_dat_cov <- p89_c1_cov_dat %>%
left_join(cov_indicator_dat %>%
select(lib_id, car_expr_cov)) %>%
group_by(lib_id) %>%
mutate(nz_cov = max(cov) >= 2) %>%
ungroup()
car_expr_dat_cov %>%
filter(!is.na(nz_cov)) %>%
plot_coverage(car_dat, fits_only = TRUE, split = FALSE) +
facet_grid(car_expr_cov ~ nz_cov)
tally_cov <- car_expr_dat_cov %>%
group_by(car_expr_cov, nz_cov) %>%
summarise(n_libs = n_distinct(lib_id))
car_expr_dat_cov %>%
filter(!is.na(nz_cov),
car_expr_cov == "car_expr_cov") %>%
plot_coverage(car_dat, fits_only = TRUE, split = TRUE)
car_expr_dat_cov %>%
filter(!is.na(nz_cov)) %>%
mutate(has_jxn = ifelse(tra_pos | trb_pos,
"tra_or_trb", "no_jxn")) %>%
plot_coverage(car_dat, fits_only = TRUE, split = FALSE) +
facet_grid(car_expr_cov ~ has_jxn)
p89_c1_egfr_cov_dat <- sc_lib_dat %>%
prep_cov_dat(egfr_cov_dat, sc_metric_dat)
head(p89_c1_egfr_cov_dat)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = TRUE)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = TRUE, split = FALSE) %>%
facet_wrap(~ egfr_xcript)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = TRUE, split = FALSE)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) %>%
facet_wrap(~ egfr_xcript)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
View(egfrt_dat)
egfrt_dat %>% transmute(egfr_xcript = transcript_id
)
egfrt_dat %>% rename(egfr_xcript = transcript_id)
head(p89_c1_egfr_cov_dat)
egfrt_dat <- egfrt_dat %>%
rename(egfr_xcript = transcript_id)
p89_c1_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
p89_c1_egfr_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
p89_c1_egfr_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript, scales = "free_x")
p89_c1_egfr_cov_dat %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
unique(p89_c1_egfr_cov_dat$egfr_xcript)
p89_c1_egfr_cov_dat %>%
filter(!is.na(egfr_xcript)) %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
library(Biostrings)
source('~/.active-rstudio-document', echo=TRUE)
car_gtf <- xcripts_gtf %>%
subset(., elementMetadata(.)$gene_id == "CAR")
egfrt_region <- car_gtf %>%
subset(., elementMetadata(.)$transcript_id == "EGFRt") %>%
ranges()
egfrt_subseq <- subseq(xcript_seqs[1],
start = egfrt_region@start - 1,
width = egfrt_region@width + 2)
seqs <- readDNAStringSet("data/sequence/hg38_CAR_transcripts.fa")
chr_names <- xcripts_gtf %>%
seqnames() %>%
as.list() %>%
unique()
xcript_matches <- lapply(chr_names, function(x) {
which(str_detect(names(seqs), x))
}) %>% as.numeric()
xcript_seqs <- seqs[xcript_matches]
egfrt_region <- car_gtf %>%
subset(., elementMetadata(.)$transcript_id == "EGFRt") %>%
ranges()
egfrt_subseq <- subseq(xcript_seqs[1],
start = egfrt_region@start - 1,
width = egfrt_region@width + 2)
gff_file <- "data/annotation/carPlusRef.gtf"
xcripts_gtf <- import.gff2(gff_file)
xcript_dat <- as.data.frame(xcripts_gtf)
car_gtf <- xcripts_gtf %>%
subset(., elementMetadata(.)$gene_id == "CAR")
egfrt_subseq <- subseq(xcript_seqs[1],
start = egfrt_region@start - 1,
width = egfrt_region@width + 2)
chr_names <- xcripts_gtf %>%
seqnames() %>%
as.list() %>%
unique()
xcript_matches <- lapply(chr_names, function(x) {
which(str_detect(names(seqs), x))
}) %>% as.numeric()
xcript_seqs <- seqs[xcript_matches]
egfrt_region <- car_gtf %>%
subset(., elementMetadata(.)$transcript_id == "EGFRt") %>%
ranges()
egfrt_subseq <- subseq(xcript_seqs[1],
start = egfrt_region@start - 1,
width = egfrt_region@width + 2)
pairwiseAlignment(egfrt_subseq[[1]], xcript_seqs[[13]])
xcripts_gtf
pairwiseAlignment(egfrt_subseq[[1]], xcript_seqs[[13]])
pairwiseAlignment(egfrt_subseq[[1]], xcript_seqs[[13]], type = "local")
?pairwiseAlignments
pairwiseAlignment(egfrt_subseq[[1]], xcript_seqs[[13]], type = "local-global")
pairwiseAlignment(egfrt_subseq[[1]], xcript_seqs[[13]], type = "global-local")
xcript_seqs[[1]]
xcript_seqs[[1]] %>% as.character()
egfrt_subseq[[1]] %>% as.character()
xcripts_gtf
egfrt_dat
xcript_dat
load("data/sample_metrics_data.RData")
load("data/sample_rapmap_data.RData")
load("data/sample_salmon_data.RData")
load("data/sample_tcr_data.RData")
gff_file <- "data/annotation/carPlusRef.gtf"
xcripts_gtf <- import.gff2(gff_file)
xcript_dat <- as.data.frame(xcripts_gtf) %>%
filter(seqnames != "NR_047551") # removing because non-coding RNA
# quick fix for egfrt_dat
egfrt_dat <- egfrt_dat %>%
rename(egfr_xcript = transcript_id) %>%
filter(seqnames != "NR_047551") # removing because non-coding RNA
# function to append CAR segment
get_segment <- Vectorize(function(pos) {
xcript_dat %>%
filter(seqnames == "CAR-1",
(start - 1) <= pos & (end + 1) >= pos) %>%
select(transcript_id) %>%
as.character()
})
lib_cov <- car_cov_dat %>%
filter(lib_id == car_cov_dat$lib_id[1]) %>%
mutate(segment = get_segment(pos)) %>%
select(pos, segment)
car_cov_dat <- car_cov_dat %>%
left_join(lib_cov, by = c("pos" = "pos")) %>%
filter(segment != "character(0)")
bulk_cov_dat <- bulk_lib_dat %>%
prep_cov_dat(car_cov_dat, bulk_metric_dat) %>%
filter(donor_id %in% c("x145", "x194", "x228"))
plot_coverage(bulk_cov_dat, car_dat)
p89_c1_cov_dat <- sc_lib_dat %>%
prep_cov_dat(car_cov_dat, sc_metric_dat)
plot_coverage(p89_c1_cov_dat, car_dat)
p85_c1_cov_dat <- p85_lib_dat %>%
prep_cov_dat(car_cov_dat, p85_metric_dat)
plot_coverage(p85_c1_cov_dat, car_dat)
p89_c1_cov_dat %>%
plot_coverage(car_dat, fits_only = TRUE)
xcript_dat
p89_c1_egfr_cov_dat <- sc_lib_dat %>%
prep_cov_dat(egfr_cov_dat, sc_metric_dat)
p89_c1_egfr_cov_dat %>%
filter(!is.na(egfr_xcript)) %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
p89_c1_egfr_cov_dat %>%
filter(!is.na(egfr_xcript),
egfr_xcript != "NR_047551") %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
egfrt_dat
egfr_cov_dat %>% str()
p89_c1_egfr_cov_dat <- sc_lib_dat %>%
prep_cov_dat(egfr_cov_dat %>%
filter(egfr_xcript != "EGFRt_r5"), # remove non-coding RNA
sc_metric_dat)
p89_c1_egfr_cov_dat %>%
filter(!is.na(egfr_xcript)) %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript)
p89_c1_egfr_cov_dat %>%
filter(!is.na(egfr_xcript)) %>%
plot_coverage(egfrt_dat, fits_only = FALSE, split = FALSE) +
facet_wrap(~ egfr_xcript, scales = "free_x")
sc_metric_dat$median_5prime_bias
sc_metric_dat$median_5prime_bias %>% summary()
sc_metric_dat$median_3prime_bias %>% summary()
sc_metric_dat$median_5prime_to_3prime_bias %>% summary()
