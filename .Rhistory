#         colnames(cvg)[1] <- "iid"
#         cvg$panel <- cvg$iid
}
xlims <- range(as.vector(ranges(zoom)))
ggplot(cvg) +
geom_rect(aes(xmin = start, xmax = end, ymin = 0, ymax = score)) +
scale_x_continuous(limits = xlims) +
guides(fill = FALSE, colour = FALSE) +
ylab("coverage (reads per 10 million)\n") +
theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
get_coverage <- function(aln, tx, seq, meta = NULL, smooth = 0, min.coverage = 0) {
#     if (!inherits(aln[[1]], "GAlignments"))
#         stop("Must supply a list of GAlignments objects.")
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(tx, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cvg <- transform(as.data.frame(bins_gr), score = countOverlaps(bins_gr, temp))
}
else {
## calculate raw coverage
message("Estimating read coverage...")
#         cvg <- lapply(lapply(aln, coverage), as, "GRanges")
#         cvg <- ldply(cvg, as.data.frame)
#         colnames(cvg)[1] <- "iid"
#         cvg$panel <- cvg$iid
}
xlims <- range(as.vector(ranges(zoom)))
ggplot(cvg) +
geom_rect(aes(xmin = start, xmax = end, ymin = 0, ymax = score)) +
scale_x_continuous(limits = xlims) +
guides(fill = FALSE, colour = FALSE) +
ylab("coverage (reads per 10 million)\n") +
theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
get_coverage(temp, car_gtf, "CAR-1", smooth = 100)
get_coverage(temp, car_gtf, "CAR-1", smooth = 1)
get_coverage(temp, car_gtf, "CAR-1", smooth = 2)
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
cvg
library(reshape2)
head(cvg)
head(cvg) %>% melt(measure.vars = c("start", "end"))
cvg %>% melt(measure.vars = c("start", "end")) %>% ggplot(aes(x = value, y = score)) + geom_line()
cvg %>% melt(measure.vars = c("start", "end")) %>% nrow()
cvg %>% melt(measure.vars = c("start", "end")) %>% ggplot(aes(x = value, y = score)) + geom_line() + geom_smooth()
get_coverage <- function(aln, tx, seq, meta = NULL, smooth = 0, min.coverage = 0) {
#     if (!inherits(aln[[1]], "GAlignments"))
#         stop("Must supply a list of GAlignments objects.")
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(tx, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cvg <- transform(as.data.frame(bins_gr), score = countOverlaps(bins_gr, temp))
}
else {
## calculate raw coverage
message("Estimating read coverage...")
cvg <- coverage(aln)[[seq]]
#         cvg <- lapply(lapply(aln, coverage), as, "GRanges")
#         cvg <- ldply(cvg, as.data.frame)
#         colnames(cvg)[1] <- "iid"
#         cvg$panel <- cvg$iid
}
xlims <- range(as.vector(ranges(zoom)))
cvg %>%
melt(measure.vars = c("start", "end")) %>%
ggplot(aes(x = value, y = score)) +
geom_line()
#     ggplot(cvg) +
#         geom_rect(aes(xmin = start, xmax = end, ymin = 0, ymax = score)) +
#         scale_x_continuous(limits = xlims) +
#         guides(fill = FALSE, colour = FALSE) +
#         ylab("coverage (reads per 10 million)\n") +
#         theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
get_coverage(temp, car_gtf, "CAR-1", smooth = 50)
get_coverage(temp, car_gtf, "CAR-1", smooth = 100)
cov_df <- create_coverage_df(bam_file, "CAR-1")
get_coverage(temp, car_gtf, "CAR-1", smooth = 0)
cvg %>% mutate(midpoint = mean(start, end))
cvg
cvg %>% mutate(midpoint = mean(start, end))
?mean
cvg %>% mutate(midpoint = start
)
cvg %>% mutate(midpoint = (start + end)/2)
cvg %>% mutate(midpoint = (start + end)/2) %>% ggplot(aes(x = midpoint, y = score)) + geom_point()
get_coverage <- function(aln, tx, seq, meta = NULL, smooth = 0, min.coverage = 0) {
#     if (!inherits(aln[[1]], "GAlignments"))
#         stop("Must supply a list of GAlignments objects.")
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(tx, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cvg <- transform(as.data.frame(bins_gr), score = countOverlaps(bins_gr, temp))
}
else {
## calculate raw coverage
message("Estimating read coverage...")
cvg <- coverage(aln)[[seq]]
#         cvg <- lapply(lapply(aln, coverage), as, "GRanges")
#         cvg <- ldply(cvg, as.data.frame)
#         colnames(cvg)[1] <- "iid"
#         cvg$panel <- cvg$iid
}
xlims <- range(as.vector(ranges(zoom)))
cvg %>%
melt(measure.vars = c("start", "end")) %>%
ggplot(aes(x = value, y = score)) +
geom_line()
cvg %>%
mutate(midpoint = (start + end) / 2) %>%
ggplot(aes(x = midpoint, y = score)) +
geom_point() +
geom_line() +
geom_smooth()
#     ggplot(cvg) +
#         geom_rect(aes(xmin = start, xmax = end, ymin = 0, ymax = score)) +
#         scale_x_continuous(limits = xlims) +
#         guides(fill = FALSE, colour = FALSE) +
#         ylab("coverage (reads per 10 million)\n") +
#         theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 2)
get_coverage(temp, car_gtf, "CAR-1", smooth = 100)
get_coverage(temp, car_gtf, "CAR-1", smooth = 25)
get_coverage <- function(aln, tx, seq, meta = NULL, smooth = 0, min.coverage = 0) {
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(tx, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cov_df <- transform(as.data.frame(bins_gr),
score = countOverlaps(bins_gr, aln)) %>%
mutate(midpoint = (start + end) / 2) %>%
select(pos = midpoint, cov = score)
}
else {
## calculate raw coverage
message("Estimating read coverage...")
cvg <- coverage(aln)[[seq]]
seq_len <- length(seq_cov)
cov_df <- data_frame(pos = 1:seq_len,
cov = as.vector(window(cvg, 1, seq_len)))
}
}
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
mutate(midpoint = (start + end) / 2) %>%
ggplot(aes(x = midpoint, y = score)) +
geom_point() +
geom_line() +
geom_smooth()
}
get_coverage(aln, car_gtf, "CAR-1", smooth = 5)
get_coverage(temp, car_gtf, "CAR-1", smooth = 5)
get_coverage <- function(aln, tx, seq, meta = NULL, smooth = 0, min.coverage = 0) {
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(tx, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cov_df <- transform(as.data.frame(bins_gr),
score = countOverlaps(bins_gr, aln)) %>%
mutate(midpoint = (start + end) / 2) %>%
select(pos = midpoint, cov = score)
}
else {
## calculate raw coverage
message("Estimating read coverage...")
cvg <- coverage(aln)[[seq]]
seq_len <- length(seq_cov)
cov_df <- data_frame(pos = 1:seq_len,
cov = as.vector(window(cvg, 1, seq_len)))
}
return(cov_df)
}
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
mutate(midpoint = (start + end) / 2) %>%
ggplot(aes(x = midpoint, y = score)) +
geom_point() +
geom_line() +
geom_smooth()
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 5)
get_coverage(temp, car_gtf, "CAR-1", smooth = 5) %>% plot_coverage()
get_coverage(temp, car_gtf, "CAR-1", smooth = 5) %>% plot_coverage(1:2515)
range(1:2515)
get_coverage(temp, car_gtf, "CAR-1", smooth = 5) %>% plot_coverage(c(1, 2515))
cov_df <- get_coverage(temp, car_gtf, "CAR-1", smooth = 5)
plot_coverage(cov_df)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov)) +
geom_point() +
geom_line() +
geom_smooth()
}
plot_coverage(cov_df)
get_coverage(temp, car_gtf, "CAR-1", smooth = 5) %>% plot_coverage(c(1, 2515))
get_coverage(temp, car_gtf, "CAR-1", smooth = 10) %>% plot_coverage(c(1, 2515))
cov_df <- get_coverage(temp, car_gtf, "CAR-1", smooth = 10)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov)) +
geom_point() +
geom_smooth()
}
get_coverage(temp, car_gtf, "CAR-1", smooth = 10) %>% plot_coverage(c(1, 2515))
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/")
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/") %>%
filter(str_detect(".bam$"))
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/") %>%
str_detect(".bam$")
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/") %>%
.[str_detect(".bam$")]
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/") %>%
.[str_detect(., ".bam$")]
build_coverage_df <- function(bam_file_list, gtf, seq_name) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
cov_df <- get_coverage(x, gtf, seq_name)
})
}
bam_files <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/") %>%
.[str_detect(., ".bam$")]
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1")
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/",
full.names = TRUE) %>%
.[str_detect(., ".bam$")]
bam_files <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/P89-10/",
full.names = TRUE) %>%
.[str_detect(., ".bam$")]
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1")
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
cov_df <- get_coverage(x, gtf, seq_name, smooth)
})
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
get_coverage <- function(aln, gtf, seq, meta = NULL, smooth = 0, min.coverage = 0) {
## set boundaries of region to plot: approx. the range of all transcripts
message("Calculating boundaries of region of interest...")
zoom <- reduce(gtf, min.gapwidth = 100e4)
zoom <- zoom[which(seqnames(zoom) == seq)]
if (smooth > 0) {
## calculated smoothed coverage
message("Smoothing coverage in windows of size ", smooth, " bp...")
bins <- seq(start(zoom), end(zoom), smooth)
bins_gr <- GRanges(seqnames = as.vector(seqnames(zoom))[1],
ranges = IRanges(start = bins [-length(bins)], end = bins[-1]-1))
cov_df <- transform(as.data.frame(bins_gr),
score = countOverlaps(bins_gr, aln)) %>%
mutate(midpoint = (start + end) / 2) %>%
select(pos = midpoint, cov = score)
}
else {
## calculate raw coverage
message("Estimating read coverage...")
cvg <- coverage(aln)[[seq]]
seq_len <- length(cvg)
cov_df <- data_frame(pos = 1:seq_len,
cov = as.vector(window(cvg, 1, seq_len)))
}
return(cov_df)
}
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
cov_df <- get_coverage(x, gtf, seq_name, smooth = smooth)
})
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
print(inherits(aln))
cov_df <- get_coverage(x, gtf, seq_name, smooth = smooth)
})
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
print(str(aln))
cov_df <- get_coverage(x, gtf, seq_name, smooth = smooth)
})
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
cov_df <- get_coverage(aln, gtf, seq_name, smooth = smooth)
})
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
build_coverage_df <- function(bam_file_list, gtf, seq_name, smooth = 0) {
lapply(bam_file_list, function(x) {
lib_id <- str_extract(x, "lib[0-9]+")
aln <- readGAlignments(x)
cov_df <- get_coverage(aln, gtf, seq_name, smooth = smooth) %>%
mutate(lib_id = lib_id)
}) %>%
bind_rows()
}
build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point() +
geom_smooth()
}
cov_df <- build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
plot_coverage(cof_df)
plot_coverage(cov_df)
install.packages("viridis")
library(viridis)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point(alpha = 0.5) +
geom_smooth() +
scale_color_viridis()
}
plot_coverage(cov_df)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point(alpha = 0.5) +
geom_smooth() +
scale_color_viridis(ddiscrete = TRUE)
}
plot_coverage(cov_df)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point(alpha = 0.5) +
geom_smooth() +
scale_color_viridis(discrete = TRUE)
}
plot_coverage(cov_df)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE) +
scale_color_viridis(discrete = TRUE)
}
plot_coverage(cov_df)
plot_coverage <- function(cov_df, xlims) {
cov_df %>%
ggplot(aes(x = pos, y = cov, colour = lib_id)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
}
plot_coverage(cov_df)
cov_df <- build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 5)
plot_coverage(cov_df)
bam_files <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/150910_D00565_0096_AC6REVANXX/",
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".bam$")]
bam_files <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/rapmap/",
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".bam$")]
cov_df <- build_coverage_df(as.list(bam_files), car_gtf, "CAR-1", 10)
View(cov_df)
plot_coverage(cov_df)
dev.off()
save.image("~/code/github/projects/carTcellAnalysis/sample_rapmap_data.RData")
load("sample_rapmap_data.RData")
?save
source("http://bioconductor.org/biocLite.R")
biocLite("tximport")
devtools::install_github("mikelove/tximport")
library(tximport)
library(readr)
salmon_file_list <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/") %>%
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".sf$")]
library(dplyr)
salmon_file_list <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/") %>%
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".sf$")]
list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/") %>%
full.names = TRUE, recursive = TRUE)
salmon_file_list <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/",
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".sf$")]
head(salmon_file_list)
tximport(salmon_file_list[1], type = "salmon", reader = read_tsv)
?tximport
tximport(salmon_file_list[1], type = "salmon", txOut = TRUE, reader = read_tsv)
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE, reader = read_tsv)
str(salmon_quant)
xcript_list <- c("CAR-1", "NM_001561", "NM_000734", "NM_198053", "NM_001243077", "NM_001243078", "NM_006139", "NM_000758", "NM_201283", "NM_201282", "NM_201284", "NM_005228", "NR_047551")
salmon_quant$counts %>% head()
salmon_quant$counts %>% head() %>% colnames()
salmon_quant$counts %>% head() %>% names()
salmon_quant$counts %>% head()  %>% .[["chr"]]
salmon_quant$counts %>% head()  %>% .[[chr]]
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
txIdCol = xcript_id,
reader = read_tsv)
str(salmon_quant)
salmon_quant$counts %>% head()
colnames(salmon_quant$counts)
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_quant$counts %>% str()
salmon_quant$counts %>% str() %>% slice(4)
salmon_quant$counts %>% head()
salmon_quant$counts %>% head() %>% as.data.frame()
salmon_quant$counts %>% head() %>% as.data.frame() %>% row.names()
salmon_counts <- salmon_quant$counts %>% as_data_frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
salmon_counts <- salmon_quant$counts %>% as_data_frame() %>%
add_rownames("tx_id")
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
View(salmon_counts)
salmon_file_list <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/150910_D00565_0096_AC6REVANXX/P89-10/",
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".sf$")]
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
salmon_quant$counts %>% head()
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id")
View(salmon_counts)
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
View(salmon_counts)
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
salmon_file_list[1]
salmon_file_list <- list.files("~/Box Sync/data/projects/carTcellAnalysis/results/salmon/150910_D00565_0096_AC6REVANXX/P89-10",
full.names = TRUE, recursive = TRUE) %>%
.[str_detect(., ".sf$")]
salmon_file_list[1]
salmon_quant <- tximport(salmon_file_list[1], type = "salmon", txOut = TRUE,
reader = read_tsv)
salmon_counts <- salmon_quant$counts %>%
as.data.frame() %>%
add_rownames("tx_id") %>%
filter(tx_id %in% xcript_list)
